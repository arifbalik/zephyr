/*
 * Copyright (c) 2025 STMicroelectronics
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/dts-v1/;

#include <st/mp13/stm32mp135.dtsi>
#include <st/mp13/stm32mp135faex-pinctrl.dtsi>
#include "zephyr/dt-bindings/display/panel.h"
#include <zephyr/dt-bindings/input/input-event-codes.h>

/ {
	model = "STMicroelectronics STM32MP135-DK board";
	compatible = "st,stm32mp135f-dk";

	chosen {
		zephyr,flash = &ddr_code;
		zephyr,sram = &ddr_data;
		zephyr,console = &uart4;
		zephyr,shell-uart = &uart4;
		zephyr,display = &ltdc;
	};

	zephyr,user {
		signal-gpios = <&mcp23017 10 GPIO_ACTIVE_HIGH>;
	};

	gpio_keys {
		compatible = "gpio-keys";

		user_button: button {
			label = "User 1";
			gpios = <&gpioa 13 GPIO_ACTIVE_LOW>;
			zephyr,code = <INPUT_KEY_0>;
		};
	};

	leds {
		compatible = "gpio-leds";

		blue_led_1: led_1 {
			gpios = <&gpioa 14 GPIO_ACTIVE_LOW>;
			label = "LD3";
		};

		red_led_2: led_2 {
			gpios = <&gpioa 13 GPIO_ACTIVE_LOW>;
			label = "LD4";
		};

		green_led_3: led_3 {
			gpios = <&mcp23017 14 GPIO_ACTIVE_HIGH>;
			label = "LD7";
		};

		orange_led_4: led_4 {
			gpios = <&mcp23017 15 GPIO_ACTIVE_HIGH>;
			label = "LD6";
		};
	};

	aliases {
		led0 = &blue_led_1;
		led1 = &red_led_2;
		sw0 = &user_button;
	};
};

&clk_hsi {
	clock-frequency = <DT_FREQ_M(64)>;
	status = "okay";
};

&clk_hse {
	clock-frequency = <DT_FREQ_M(24)>;
	status = "okay";
};

&cpusw {
	clocks = <&clk_hsi>;
	clock-frequency = <DT_FREQ_M(64)>;
	status = "okay";
};

&pll1 {
	clocks = <&clk_hse>;
	div-m = <2>;
	mul-n = <83>;
	div-p = <1>;
	fracn = <2730>;
	status = "okay";
};

&pll4 {
	clocks = <&clk_hsi>;
	div-m = <2>;
	mul-n = <50>;
	div-p = <12>;
	div-q = <60>;
	div-r = <6>;
	fracn = <0>;
	status = "okay";
};

&rcc {
	clock-frequency = <DT_FREQ_M(1000)>;
	clocks = <&pll &pll4>;
	//ahb-prescaler = <1>;
	//apb1-prescaler = <1>;
	//apb2-prescaler = <1>;
	ahb6-prescaler = <1>;
};

&uart4 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart4_tx_pd6 &uart4_rx_pd8>;
	current-speed = <115200>;
	status = "okay";
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_scl_pd12 &i2c1_sda_pe8>;
	status = "okay";

	mcp23017: pinctrl@21 {
		compatible = "microchip,mcp23017";
		reg = <0x21>;
		gpio-controller;
		#gpio-cells = <2>;
		ngpios = <16>;
	};
};

&i2c4 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c4_scl_pe15 &i2c4_sda_pb9>;
	status = "okay";
};

&i2c5 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c5_scl_pd1 &i2c5_sda_ph6>;
	status = "okay";
};

&ltdc {
	pinctrl-0 = <&ltdc_r2_pg7 &ltdc_r3_pb12
			&ltdc_r4_pd14 &ltdc_r5_pe7 &ltdc_r6_pe13 &ltdc_r7_pe9
			&ltdc_g2_ph13 &ltdc_g3_pf3
			&ltdc_g4_pd5 &ltdc_g5_pg0 &ltdc_g6_pc7 &ltdc_g7_pa15
			&ltdc_b2_pd10 &ltdc_b3_pf2
			&ltdc_b4_ph14 &ltdc_b5_pe0 &ltdc_b6_pb6 &ltdc_b7_pf1
			&ltdc_de_ph9 &ltdc_clk_pd9 &ltdc_hsync_pc6 &ltdc_vsync_pg4>;
	pinctrl-names = "default";
	disp-on-gpios = <&gpioi 7 GPIO_ACTIVE_HIGH>;
	bl-ctrl-gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;

	status = "okay";

	width = <480>;
	height = <272>;
	pixel-format = <PANEL_PIXEL_FORMAT_RGB_565>;

	display-timings {
		compatible = "zephyr,panel-timing";
		de-active = <0>;
		pixelclk-active = <0>;
		hsync-active = <0>;
		vsync-active = <0>;
		hsync-len = <41>;
		vsync-len = <10>;
		hback-porch = <13>;
		vback-porch = <2>;
		hfront-porch = <32>;
		vfront-porch = <2>;
	};

	def-back-color-red = <0xFF>;
	def-back-color-green = <0xFF>;
	def-back-color-blue = <0xFF>;
};

&mac {
	status = "okay";
	pinctrl-0 = <&eth1_txd0_pg13
		     &eth1_txd1_pg14
		     &eth1_tx_ctl_pb11
		     &eth1_ref_clk_pa1
		     &eth1_rxd0_pc4
		     &eth1_rxd1_pc5
		     &eth1_crs_dv_pc1>;
	pinctrl-names = "default";
	phy-connection-type = "rmii";
	phy-handle = <&eth_phy>;
};

&mdio {
	status = "okay";
	pinctrl-0 = <&eth1_mdio_pa2 &eth1_mdc_pg2>;
	pinctrl-names = "default";

	eth_phy: ethernet-phy@1 {
		//compatible = "microchip,lan8742";
		compatible = "ethernet-phy";
		reg = <0>;
		/**
		 * PD3 can be used as alternate function ETH1_PHY_INTN,
		 * which allows the Ethernet MAC to sense interrupts from
		 * the PHY in order to signal them to the CPU via its own
		 * interrupt lines. However, the Zephyr RTL8211F driver
		 * is unaware of this mechanism. Skip configuring PD3 as
		 * alternate function (in pinctrl of &mac) and provide the
		 * pin to the RTL8211F driver for interrupt sensing using
		 * the regular GPIO interrupt APIs.
		 */
		//int-gpios = <&gpiog 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;

		//reset-gpios = <&mcp23017 9 GPIO_ACTIVE_LOW>;
	};
};